// THIS FILE IS GENERATED BY https://github.com/fastenhealth/fasten-onprem/blob/main/backend/pkg/models/database/generate.go
// PLEASE DO NOT EDIT BY HAND

package database

import (
	"encoding/json"
	"fmt"
	goja "github.com/dop251/goja"
	models "github.com/fastenhealth/fasten-onprem/backend/pkg/models"
	datatypes "gorm.io/datatypes"
	"time"
)

type FhirAdverseEvent struct {
	models.ResourceBase
	// actual | potential
	// https://hl7.org/fhir/r4/search.html#token
	Actuality datatypes.JSON `gorm:"column:actuality;type:text;serializer:json" json:"actuality,omitempty"`
	// product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment
	// https://hl7.org/fhir/r4/search.html#token
	Category datatypes.JSON `gorm:"column:category;type:text;serializer:json" json:"category,omitempty"`
	// When the event occurred
	// https://hl7.org/fhir/r4/search.html#date
	Date *time.Time `gorm:"column:date;type:datetime" json:"date,omitempty"`
	// Type of the event itself in relation to the subject
	// https://hl7.org/fhir/r4/search.html#token
	Event datatypes.JSON `gorm:"column:event;type:text;serializer:json" json:"event,omitempty"`
	// Language of the resource content
	// https://hl7.org/fhir/r4/search.html#token
	Language datatypes.JSON `gorm:"column:language;type:text;serializer:json" json:"language,omitempty"`
	// Location where adverse event occurred
	// https://hl7.org/fhir/r4/search.html#reference
	Location datatypes.JSON `gorm:"column:location;type:text;serializer:json" json:"location,omitempty"`
	// When the resource version last changed
	// https://hl7.org/fhir/r4/search.html#date
	MetaLastUpdated *time.Time `gorm:"column:metaLastUpdated;type:datetime" json:"metaLastUpdated,omitempty"`
	// Profiles this resource claims to conform to
	// https://hl7.org/fhir/r4/search.html#reference
	MetaProfile datatypes.JSON `gorm:"column:metaProfile;type:text;serializer:json" json:"metaProfile,omitempty"`
	// Tags applied to this resource
	// https://hl7.org/fhir/r4/search.html#token
	MetaTag datatypes.JSON `gorm:"column:metaTag;type:text;serializer:json" json:"metaTag,omitempty"`
	// Tags applied to this resource
	// This is a primitive string literal (`keyword` type). It is not a recognized SearchParameter type from https://hl7.org/fhir/r4/search.html, it's Fasten Health-specific
	MetaVersionId string `gorm:"column:metaVersionId;type:text" json:"metaVersionId,omitempty"`
	// Who recorded the adverse event
	// https://hl7.org/fhir/r4/search.html#reference
	Recorder datatypes.JSON `gorm:"column:recorder;type:text;serializer:json" json:"recorder,omitempty"`
	// Effect on the subject due to this event
	// https://hl7.org/fhir/r4/search.html#reference
	Resultingcondition datatypes.JSON `gorm:"column:resultingcondition;type:text;serializer:json" json:"resultingcondition,omitempty"`
	// Seriousness of the event
	// https://hl7.org/fhir/r4/search.html#token
	Seriousness datatypes.JSON `gorm:"column:seriousness;type:text;serializer:json" json:"seriousness,omitempty"`
	// mild | moderate | severe
	// https://hl7.org/fhir/r4/search.html#token
	Severity datatypes.JSON `gorm:"column:severity;type:text;serializer:json" json:"severity,omitempty"`
	// AdverseEvent.study
	// https://hl7.org/fhir/r4/search.html#reference
	Study datatypes.JSON `gorm:"column:study;type:text;serializer:json" json:"study,omitempty"`
	// Subject impacted by event
	// https://hl7.org/fhir/r4/search.html#reference
	Subject datatypes.JSON `gorm:"column:subject;type:text;serializer:json" json:"subject,omitempty"`
	// Refers to the specific entity that caused the adverse event
	// https://hl7.org/fhir/r4/search.html#reference
	Substance datatypes.JSON `gorm:"column:substance;type:text;serializer:json" json:"substance,omitempty"`
	// Text search against the narrative
	// This is a primitive string literal (`keyword` type). It is not a recognized SearchParameter type from https://hl7.org/fhir/r4/search.html, it's Fasten Health-specific
	Text string `gorm:"column:text;type:text" json:"text,omitempty"`
	// A resource type filter
	// https://hl7.org/fhir/r4/search.html#special
	Type datatypes.JSON `gorm:"column:type;type:text;serializer:json" json:"type,omitempty"`
}

func (s *FhirAdverseEvent) GetSearchParameters() map[string]string {
	searchParameters := map[string]string{
		"actuality":            "token",
		"category":             "token",
		"date":                 "date",
		"event":                "token",
		"id":                   "keyword",
		"language":             "token",
		"location":             "reference",
		"metaLastUpdated":      "date",
		"metaProfile":          "reference",
		"metaTag":              "token",
		"metaVersionId":        "keyword",
		"recorder":             "reference",
		"resultingcondition":   "reference",
		"seriousness":          "token",
		"severity":             "token",
		"sort_date":            "date",
		"source_id":            "keyword",
		"source_resource_id":   "keyword",
		"source_resource_type": "keyword",
		"source_uri":           "keyword",
		"study":                "reference",
		"subject":              "reference",
		"substance":            "reference",
		"text":                 "keyword",
		"type":                 "special",
	}
	return searchParameters
}
func (s *FhirAdverseEvent) PopulateAndExtractSearchParameters(resourceRaw json.RawMessage) error {
	s.ResourceRaw = datatypes.JSON(resourceRaw)
	// unmarshal the raw resource (bytes) into a map
	var resourceRawMap map[string]interface{}
	err := json.Unmarshal(resourceRaw, &resourceRawMap)
	if err != nil {
		return err
	}
	if len(fhirPathJs) == 0 {
		return fmt.Errorf("fhirPathJs script is empty")
	}
	vm := goja.New()
	// setup the global window object
	vm.Set("window", vm.NewObject())
	// set the global FHIR Resource object
	vm.Set("fhirResource", resourceRawMap)
	// compile the fhirpath library
	fhirPathJsProgram, err := goja.Compile("fhirpath.min.js", fhirPathJs, true)
	if err != nil {
		return err
	}
	// compile the searchParametersExtractor library
	searchParametersExtractorJsProgram, err := goja.Compile("searchParameterExtractor.js", searchParameterExtractorJs, true)
	if err != nil {
		return err
	}
	// add the fhirpath library in the goja vm
	_, err = vm.RunProgram(fhirPathJsProgram)
	if err != nil {
		return err
	}
	// add the searchParametersExtractor library in the goja vm
	_, err = vm.RunProgram(searchParametersExtractorJsProgram)
	if err != nil {
		return err
	}
	// execute the fhirpath expression for each search parameter
	// extracting Actuality
	actualityResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'AdverseEvent.actuality')")
	if err == nil && actualityResult.String() != "undefined" {
		s.Actuality = []byte(actualityResult.String())
	}
	// extracting Category
	categoryResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'AdverseEvent.category')")
	if err == nil && categoryResult.String() != "undefined" {
		s.Category = []byte(categoryResult.String())
	}
	// extracting Date
	dateResult, err := vm.RunString("extractDateSearchParameters(fhirResource, 'AdverseEvent.date')")
	if err == nil && dateResult.String() != "undefined" {
		t, err := time.Parse(time.RFC3339, dateResult.String())
		if err == nil {
			s.Date = &t
		} else if err != nil {
			d, err := time.Parse("2006-01-02", dateResult.String())
			if err == nil {
				s.Date = &d
			}
		}
	}
	// extracting Event
	eventResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'AdverseEvent.event')")
	if err == nil && eventResult.String() != "undefined" {
		s.Event = []byte(eventResult.String())
	}
	// extracting Language
	languageResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'language')")
	if err == nil && languageResult.String() != "undefined" {
		s.Language = []byte(languageResult.String())
	}
	// extracting Location
	locationResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.location')")
	if err == nil && locationResult.String() != "undefined" {
		s.Location = []byte(locationResult.String())
	}
	// extracting MetaLastUpdated
	metaLastUpdatedResult, err := vm.RunString("extractDateSearchParameters(fhirResource, 'meta.lastUpdated')")
	if err == nil && metaLastUpdatedResult.String() != "undefined" {
		t, err := time.Parse(time.RFC3339, metaLastUpdatedResult.String())
		if err == nil {
			s.MetaLastUpdated = &t
		} else if err != nil {
			d, err := time.Parse("2006-01-02", metaLastUpdatedResult.String())
			if err == nil {
				s.MetaLastUpdated = &d
			}
		}
	}
	// extracting MetaProfile
	metaProfileResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'meta.profile')")
	if err == nil && metaProfileResult.String() != "undefined" {
		s.MetaProfile = []byte(metaProfileResult.String())
	}
	// extracting MetaTag
	metaTagResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'meta.tag')")
	if err == nil && metaTagResult.String() != "undefined" {
		s.MetaTag = []byte(metaTagResult.String())
	}
	// extracting MetaVersionId
	metaVersionIdResult, err := vm.RunString("extractSimpleSearchParameters(fhirResource, 'meta.versionId')")
	if err == nil && metaVersionIdResult.String() != "undefined" {
		s.MetaVersionId = metaVersionIdResult.String()
	}
	// extracting Recorder
	recorderResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.recorder')")
	if err == nil && recorderResult.String() != "undefined" {
		s.Recorder = []byte(recorderResult.String())
	}
	// extracting Resultingcondition
	resultingconditionResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.resultingCondition')")
	if err == nil && resultingconditionResult.String() != "undefined" {
		s.Resultingcondition = []byte(resultingconditionResult.String())
	}
	// extracting Seriousness
	seriousnessResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'AdverseEvent.seriousness')")
	if err == nil && seriousnessResult.String() != "undefined" {
		s.Seriousness = []byte(seriousnessResult.String())
	}
	// extracting Severity
	severityResult, err := vm.RunString("extractTokenSearchParameters(fhirResource, 'AdverseEvent.severity')")
	if err == nil && severityResult.String() != "undefined" {
		s.Severity = []byte(severityResult.String())
	}
	// extracting Study
	studyResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.study')")
	if err == nil && studyResult.String() != "undefined" {
		s.Study = []byte(studyResult.String())
	}
	// extracting Subject
	subjectResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.subject')")
	if err == nil && subjectResult.String() != "undefined" {
		s.Subject = []byte(subjectResult.String())
	}
	// extracting Substance
	substanceResult, err := vm.RunString("extractReferenceSearchParameters(fhirResource, 'AdverseEvent.suspectEntity.instance')")
	if err == nil && substanceResult.String() != "undefined" {
		s.Substance = []byte(substanceResult.String())
	}
	// extracting Text
	textResult, err := vm.RunString("extractSimpleSearchParameters(fhirResource, 'text')")
	if err == nil && textResult.String() != "undefined" {
		s.Text = textResult.String()
	}
	return nil
}

// TableName overrides the table name from fhir_observations (pluralized) to `fhir_observation`. https://gorm.io/docs/conventions.html#TableName
func (s *FhirAdverseEvent) TableName() string {
	return "fhir_adverse_event"
}
