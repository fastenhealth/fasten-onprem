// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_event_bus is a generated GoMock package.
package mock_event_bus

import (
	reflect "reflect"

	event_bus "github.com/fastenhealth/fasten-onprem/backend/pkg/event_bus"
	models "github.com/fastenhealth/fasten-onprem/backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockInterface) AddListener(listener *event_bus.EventBusListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", listener)
}

// AddListener indicates an expected call of AddListener.
func (mr *MockInterfaceMockRecorder) AddListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockInterface)(nil).AddListener), listener)
}

// PublishMessage mocks base method.
func (m *MockInterface) PublishMessage(eventMsg models.EventInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", eventMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockInterfaceMockRecorder) PublishMessage(eventMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockInterface)(nil).PublishMessage), eventMsg)
}

// RemoveListener mocks base method.
func (m *MockInterface) RemoveListener(listener *event_bus.EventBusListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", listener)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockInterfaceMockRecorder) RemoveListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockInterface)(nil).RemoveListener), listener)
}

// TotalListenersByRoom mocks base method.
func (m *MockInterface) TotalListenersByRoom(room string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalListenersByRoom", room)
	ret0, _ := ret[0].(int)
	return ret0
}

// TotalListenersByRoom indicates an expected call of TotalListenersByRoom.
func (mr *MockInterfaceMockRecorder) TotalListenersByRoom(room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalListenersByRoom", reflect.TypeOf((*MockInterface)(nil).TotalListenersByRoom), room)
}

// TotalRooms mocks base method.
func (m *MockInterface) TotalRooms() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalRooms")
	ret0, _ := ret[0].(int)
	return ret0
}

// TotalRooms indicates an expected call of TotalRooms.
func (mr *MockInterfaceMockRecorder) TotalRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalRooms", reflect.TypeOf((*MockInterface)(nil).TotalRooms))
}
